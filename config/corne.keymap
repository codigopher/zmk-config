/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            hold-trigger-key-positions = <41 39 40 30 18 6 7 8 9 10 11 19 20 21 22 23 31 32 33 34 35>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | ALT | GUI | ENT |   | SPC | LWR  | RSE |

            bindings = <
&kp TAB              &hml LSHIFT Q  &hml RIGHT_CONTROL W  &hml LEFT_ALT E  &hml LEFT_GUI R  &kp T      &kp Y      &kp U  &kp I      &kp O    &hmr RIGHT_SHIFT P  &kp BSPC
&mt LEFT_SHIFT CAPS  &kp A          &kp S                 &kp D            &kp F            &kp G      &kp H      &kp J  &kp K      &kp L    &kp SEMICOLON       &kp SQT
&kp LCTRL            &kp Z          &kp X                 &kp C            &kp V            &kp B      &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH            &kp ESC
                                                          &kp RALT         &kp LGUI         &kp RET    &kp SPACE  &mo 1  &mo 2
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL  |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | ALT | GUI | ENT |   | SPC | LWR | RSE |

            bindings = <
&kp TAB    &kp N1  &kp N2  &kp N3  &kp N4  &kp N5       &kp N6    &kp N7    &kp N8  &kp N9     &kp N0  &kp DELETE
&trans     &kp F1  &kp F2  &kp F3  &kp F4  &kp F5       &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&kp LSHFT  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10      &kp F11   &kp F12   &trans  &trans     &trans  &trans
                           &trans  &trans  &kp SPACE    &trans    &trans    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | ALT | GUI | ENT |   | SPC | LWR | RSE |

            bindings = <
&kp TAB  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &trans
&trans   &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans   &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                           &trans    &trans    &trans       &trans     &trans     &trans
            >;
        };

        both {
            bindings = <
&trans           &bt BT_CLR    &trans        &trans        &trans        &trans          &kp C_VOL_DN  &kp C_PREVIOUS  &kp C_PP  &kp C_NEXT  &kp C_VOLUME_UP  &kp K_MUTE
&rgb_ug RGB_OFF  &trans        &trans        &trans        &trans        &trans          &trans        &trans          &trans    &trans      &trans           &trans
&trans           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans        &trans          &trans    &trans      &trans           &trans
                                             &trans        &trans        &trans          &trans        &trans          &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };
};
